
const rest = {
    post: function(mUrl, uid, mData){
        return $.ajax({
            "url": mUrl,
            "method": "POST",
            "cache": false,
            "timeout": 0,
            "headers": {
                "Content-Type": "application/json",
                "uid": uid
            },
            "data": JSON.stringify(mData)
        });
    },
    get: function(mUrl, mData){
        return $.ajax({
            "type": "GET",
            "url": mUrl,
            "data": mData,
            "contentType": "application/json; charset=utf-8",
        });
    }
}

const user = {
    encrypt: async function(uid, param){
        const api = `/api/user/encrypt`
        const res = await $.when(rest.post(api, uid, param))
        return res
    },
    decrypt: async function(uid, param){
        const api = `/api/user/decrypt`
        const res = await $.when(rest.post(api, uid, param))
        return res
    }
}

const book = {
    decrypt: async function(uid, param){
        const api = `/api/book/decrypt`
        const res = await $.when(rest.post(api, uid, param))
        return res
    }
}

const analysis = {
    get: async function(){
        const api = `/api/analysis/month`
        const res = await $.when(rest.get(api, null))
        return res
    }
}

const store = {
    get: function(k){
        return sessionStorage.getItem(k);
    },
    set: function(k, v){
        sessionStorage.setItem(k, v);
    },
    remove: function(k){
        sessionStorage.removeItem(k);
    }
}

function changeSearchParam(params){
    var s = new URLSearchParams(window.location.search);
    var hash = location.hash;
    for(var k in params){
        (s.get(k) == null) ? s.append(k, params[k]) : s.set(k, params[k]);
    }
    return location.pathname+"?"+s.toString()+hash;
}

function goPage(_page) {
    document.location.href = changeSearchParam({page: _page});
};

function generalPage(viewName){
    var obj = $(viewName);
    var page = obj.data("page") * 1;
    var count = obj.data("count") * 1;
    var limit = obj.data("limit") * 1;
    if(count < limit){
        //first page
    }else{
        var tmp = Math.ceil(count/limit);
        if(page != 1){
            obj.append(`<button type="button" class="btn btn-white" index="before"><</button>`)
            obj.find(`[index="before"]`).attr("onclick", `goPage(${page-1})`)
        }

        obj.append(`<button type="button" class="btn btn-white" index="1" onclick="goPage(1)">1</button>`)

        for(var i = 2; i <= tmp; i++){
            var html = `<button type="button" class="btn btn-white" onclick="goPage(${i})" index="${i}">${i}</button>`
            obj.append(html)
        }

        if(page != tmp){
            obj.append(`<button type="button" class="btn btn-white" index="after">></button>`)
            obj.find(`[index="after"]`).attr("onclick", `goPage(${page+1})`)
        }

        obj.find(`[index="${page}"]`).addClass("active");
        obj.find(`[index="${page}"]`).removeAttr("onclick");
    }
}

async function userDecrypt(obj){
    const param = {
        fullName: obj.dataset.fullName,
        phone: obj.dataset.phone,
        email: obj.dataset.email
    }
    const res = await user.decrypt(1, param)
    const data = res.data
    obj.querySelector(`[field="fullName"]`).innerHTML = data.fullName
    obj.querySelector(`[field="phone"]`).innerHTML = data.phone
    obj.querySelector(`[field="email"]`).innerHTML = data.email
}

async function bookDecrypt(obj){
    const param = {
        userFullName: obj.dataset.userFullName,
        userPhone: obj.dataset.userPhone,
        doctorFullName: obj.dataset.doctorFullName,
        doctorPhone: obj.dataset.doctorPhone
    }
    const res = await book.decrypt(1, param)
    const data = res.data
    obj.querySelector(`[field="userFullName"]`).innerHTML = data.userFullName
    obj.querySelector(`[field="userPhone"]`).innerHTML = data.userPhone
    obj.querySelector(`[field="doctorFullName"]`).innerHTML = data.doctorFullName
    obj.querySelector(`[field="doctorPhone"]`).innerHTML = data.doctorPhone
}

$(document).ready(function(){

    $('.paging[onload]').trigger('onload');
    $('.user[onload]').trigger('onload');
    $('.book[onload]').trigger('onload');
    
    $("input.onlynum").on("input",function(){
        var str = $(this).val();
        var lastChar = (str.length > 0) ? str.substring(str.length - 1)  : false ;
        if(!lastChar) return;
        if(isNaN(lastChar)) $(this).val(str.slice(0, -1)); 
    })

    $("form").submit(function(){
        $("#loader").removeClass("loaded");
    })
})